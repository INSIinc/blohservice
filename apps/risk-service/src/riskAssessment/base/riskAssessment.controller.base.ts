/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RiskAssessmentService } from "../riskAssessment.service";
import { RiskAssessmentCreateInput } from "./RiskAssessmentCreateInput";
import { RiskAssessment } from "./RiskAssessment";
import { RiskAssessmentFindManyArgs } from "./RiskAssessmentFindManyArgs";
import { RiskAssessmentWhereUniqueInput } from "./RiskAssessmentWhereUniqueInput";
import { RiskAssessmentUpdateInput } from "./RiskAssessmentUpdateInput";

export class RiskAssessmentControllerBase {
  constructor(protected readonly service: RiskAssessmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RiskAssessment })
  async createRiskAssessment(
    @common.Body() data: RiskAssessmentCreateInput
  ): Promise<RiskAssessment> {
    return await this.service.createRiskAssessment({
      data: {
        ...data,

        risks: data.risks
          ? {
              connect: data.risks,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        risks: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RiskAssessment] })
  @ApiNestedQuery(RiskAssessmentFindManyArgs)
  async riskAssessments(
    @common.Req() request: Request
  ): Promise<RiskAssessment[]> {
    const args = plainToClass(RiskAssessmentFindManyArgs, request.query);
    return this.service.riskAssessments({
      ...args,
      select: {
        createdAt: true,
        id: true,

        risks: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RiskAssessment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async riskAssessment(
    @common.Param() params: RiskAssessmentWhereUniqueInput
  ): Promise<RiskAssessment | null> {
    const result = await this.service.riskAssessment({
      where: params,
      select: {
        createdAt: true,
        id: true,

        risks: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RiskAssessment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRiskAssessment(
    @common.Param() params: RiskAssessmentWhereUniqueInput,
    @common.Body() data: RiskAssessmentUpdateInput
  ): Promise<RiskAssessment | null> {
    try {
      return await this.service.updateRiskAssessment({
        where: params,
        data: {
          ...data,

          risks: data.risks
            ? {
                connect: data.risks,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          risks: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RiskAssessment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRiskAssessment(
    @common.Param() params: RiskAssessmentWhereUniqueInput
  ): Promise<RiskAssessment | null> {
    try {
      return await this.service.deleteRiskAssessment({
        where: params,
        select: {
          createdAt: true,
          id: true,

          risks: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
