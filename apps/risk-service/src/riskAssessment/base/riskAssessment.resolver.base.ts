/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RiskAssessment } from "./RiskAssessment";
import { RiskAssessmentCountArgs } from "./RiskAssessmentCountArgs";
import { RiskAssessmentFindManyArgs } from "./RiskAssessmentFindManyArgs";
import { RiskAssessmentFindUniqueArgs } from "./RiskAssessmentFindUniqueArgs";
import { CreateRiskAssessmentArgs } from "./CreateRiskAssessmentArgs";
import { UpdateRiskAssessmentArgs } from "./UpdateRiskAssessmentArgs";
import { DeleteRiskAssessmentArgs } from "./DeleteRiskAssessmentArgs";
import { Risk } from "../../risk/base/Risk";
import { RiskAssessmentService } from "../riskAssessment.service";
@graphql.Resolver(() => RiskAssessment)
export class RiskAssessmentResolverBase {
  constructor(protected readonly service: RiskAssessmentService) {}

  async _riskAssessmentsMeta(
    @graphql.Args() args: RiskAssessmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RiskAssessment])
  async riskAssessments(
    @graphql.Args() args: RiskAssessmentFindManyArgs
  ): Promise<RiskAssessment[]> {
    return this.service.riskAssessments(args);
  }

  @graphql.Query(() => RiskAssessment, { nullable: true })
  async riskAssessment(
    @graphql.Args() args: RiskAssessmentFindUniqueArgs
  ): Promise<RiskAssessment | null> {
    const result = await this.service.riskAssessment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RiskAssessment)
  async createRiskAssessment(
    @graphql.Args() args: CreateRiskAssessmentArgs
  ): Promise<RiskAssessment> {
    return await this.service.createRiskAssessment({
      ...args,
      data: {
        ...args.data,

        risks: args.data.risks
          ? {
              connect: args.data.risks,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => RiskAssessment)
  async updateRiskAssessment(
    @graphql.Args() args: UpdateRiskAssessmentArgs
  ): Promise<RiskAssessment | null> {
    try {
      return await this.service.updateRiskAssessment({
        ...args,
        data: {
          ...args.data,

          risks: args.data.risks
            ? {
                connect: args.data.risks,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RiskAssessment)
  async deleteRiskAssessment(
    @graphql.Args() args: DeleteRiskAssessmentArgs
  ): Promise<RiskAssessment | null> {
    try {
      return await this.service.deleteRiskAssessment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Risk, {
    nullable: true,
    name: "risks",
  })
  async getRisks(
    @graphql.Parent() parent: RiskAssessment
  ): Promise<Risk | null> {
    const result = await this.service.getRisks(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
